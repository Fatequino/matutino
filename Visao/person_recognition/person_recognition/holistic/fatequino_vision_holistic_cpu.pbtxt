# Prediz os landmarks da pose + mão direita/esquerda e a região onde está a face.
#
# Autor: Ricardo Careta (2021) - Adaptado do arquivo padrão do mediapipe holistic_landmark_cpu.pbtxt
#
# Caso não tenha conhecimento sobre o que se trata o arquivo, favor não alterar.
# Caso esteja interessado em aprender, recomendo que leia esse link https://google.github.io/mediapipe/framework_concepts/graphs.html, juntamente com outros tópicos desse mesmo site. 

# CPU image. (ImageFrame)
input_stream: "IMAGE:image"

# Pacote responsável por dizer se detectará o corpo inteiro ou apenas a parte de cima. 
# Se não for especificado, o padrão será false (bool).
# Quando utilizado, pode dar mais acuracidade em casos onde a parte de baixa do corpo é mais fora de vista.
input_side_packet: "UPPER_BODY_ONLY:upper_body_only"

# Filtra os pontos de referência em diferentes imagens de entrada para reduzir o jitter (variação estatística do atraso na entrega de dados em uma rede).
# Se não for especificado, funciona como definido como verdadeiro. (bool) 
input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"

# Pose landmarks. (NormalizedLandmarkList)
# Utiliza 33 landmarks ou 25 landmarks se UPPER_BODY_ONLY é true. 
output_stream: "POSE_LANDMARKS:pose_landmarks"
# 21 landmarks da mão esquerda. (NormalizedLandmarkList)
output_stream: "LEFT_HAND_LANDMARKS:left_hand_landmarks"
# 21 landmarks da mão direita. (NormalizedLandmarkList)
output_stream: "RIGHT_HAND_LANDMARKS:right_hand_landmarks"

# Coordenadas da região da face da pose
output_stream: "ROI:face_roi_from_pose"
# output_stream: "FACE_ROI:face_roi"

# Prediz pose landmarks.
node {
  calculator: "PoseLandmarkCpu"
  input_stream: "IMAGE:image"
  input_side_packet: "UPPER_BODY_ONLY:upper_body_only"
  input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"
  output_stream: "LANDMARKS:pose_landmarks"
  output_stream: "ROI_FROM_LANDMARKS:pose_landmarks_roi"
  output_stream: "DETECTION:pose_detection"
}

# Prediz os landmarks das mãos esquerda e direita, baseando-se nos pose landmarks iniciais.
node {
  calculator: "HandLandmarksLeftAndRightCpu"
  input_stream: "IMAGE:image"
  input_stream: "POSE_LANDMARKS:pose_landmarks"
  output_stream: "LEFT_HAND_LANDMARKS:left_hand_landmarks"
  output_stream: "RIGHT_HAND_LANDMARKS:right_hand_landmarks"
}

# Extrai os landmarks da face da pose landmarks.
node {
  calculator: "SplitNormalizedLandmarkListCalculator"
  input_stream: "pose_landmarks"
  output_stream: "face_landmarks_from_pose"
  options: {
    [mediapipe.SplitVectorCalculatorOptions.ext] {
      ranges: { begin: 0 end: 11 }
    }
  }
}

# Extrai o tamanho da imagem a partir da imagem
# Talvez seja interessante já passar essas informações em packets para poupar cálculos.
node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:image"
  output_stream: "SIZE:image_size"
}

# Obtem ROI (Region of Interest) para saber qual as coordenadas da região da face da pose na imagem principal
node {
  calculator: "FaceLandmarksFromPoseToRecropRoi"
  input_stream: "FACE_LANDMARKS_FROM_POSE:face_landmarks_from_pose"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "ROI:face_roi_from_pose"
}


# Os dois nodes a seguir dão uma maior precisão na detecção, porém perde alguns FPS, então foram comentados. 
# Juntamente com a linha 'ROI:face_roi_from_detection'

# Calcula as detecções da face a partir da ROI do video
# node {
#   calculator: "FaceDetectionFrontByRoiCpu"
#   input_stream: "IMAGE:image"
#   input_stream: "ROI:face_roi_from_pose"
#   output_stream: "DETECTIONS:face_detections"
# }

# Calcula uma face ROI mais refinada.
# node {
#   calculator: "FaceDetectionFrontDetectionsToRoi",
#   input_stream: "DETECTIONS:face_detections"
#   input_stream: "IMAGE_SIZE:image_size"
#   output_stream: "ROI:face_roi"
# }